{"version":3,"sources":["webpack:///./app/utils/language.js","webpack:///./app/components/Authenticated.js","webpack:///./app/components/LoadingIndicator/LoadingIndicator.js","webpack:///./app/components/LoadingIndicator/LoadingIndicatorBar.js","webpack:///./app/components/LoadingIndicator/index.js"],"names":["detectLanguage","navigator","language","split","ln","region","toUpperCase","changeLanguage","toLanguageString","i18n","replace","observer","Authenticated","children","auth","useStores","useTranslation","user","React","authenticated","team","hostname","window","location","domain","href","url","pathname","env","SUBDOMAINS_ENABLED","subdomain","isCustomSubdomain","startsWith","logout","to","LoadingIndicator","this","props","ui","enableProgressBar","disableProgressBar","inject","loadingFrame","keyframes","Container","styled","div","theme","depths","loadingIndicatorBar","Loader","primary","LoadingIndicatorBar"],"mappings":"s0CAEO,SAASA,iBAAiB,qBACfC,UAAUC,SAASC,MAAM,KADV,GACxBC,EADwB,KAEzBC,GAFyB,MAEVD,GAAIE,cACzB,gBAAUF,EAAV,YAAgBC,GAGX,SAASE,eAAeC,EAA2BC,GACpDD,GAAoBC,EAAKP,WAAaM,GAGxCC,EAAKF,eAAeC,EAAiBE,QAAQ,IAAK,Q,6KC8CvCC,uBA3CO,SAAhBC,cAAiB,GAAwB,IAAtBC,EAAsB,EAAtBA,SACfC,EAASC,cAATD,KACAL,EAASO,cAATP,KACFP,EAAWY,EAAKG,MAAQH,EAAKG,KAAKf,SAQxC,GAJAgB,aAAgB,WACdX,YAAeL,EAAUO,KACxB,CAACA,EAAMP,IAENY,EAAKK,cAAe,KACdF,EAAeH,EAAfG,KAAMG,EAASN,EAATM,KACNC,EAAaC,OAAOC,SAApBF,SAER,IAAKD,IAASH,EACZ,OAAO,gBAAC,IAAD,MAKT,GAAIG,EAAKI,QACP,GAAIJ,EAAKI,SAAWH,EAElB,OADAC,OAAOC,SAASE,KAAhB,UAA0BL,EAAKM,KAA/B,OAAqCJ,OAAOC,SAASI,UAC9C,gBAAC,IAAD,WAEJ,GACLC,IAAIC,oBACJT,EAAKU,WACLC,YAAkBV,KACjBA,EAASW,WAAT,UAAuBZ,EAAKU,UAA5B,MAGD,OADAR,OAAOC,SAASE,KAAhB,UAA0BL,EAAKM,KAA/B,OAAqCJ,OAAOC,SAASI,UAC9C,gBAAC,IAAD,MAGT,OAAOd,EAIT,OADAC,EAAKmB,QAAO,GACL,gBAAC,IAAD,CAAUC,GAAG,U,8sDC7ChBC,EADLxB,Y,+lBAGGyB,KAAKC,MAAMC,GAAGC,sB,kEAIdH,KAAKC,MAAMC,GAAGE,uB,sCAId,OAAO,S,kBAVoBtB,e,EAchBuB,cAAO,KAAPA,CAAaN,G,YCZtBO,EAAeC,oBAAH,mDAKZC,EAAYC,UAAOC,IAAV,oFAAGD,CAAH,gIAGF,SAACR,GAAD,OAAWA,EAAMU,MAAMC,OAAOC,sBAE5BP,GAKTQ,EAASL,UAAOC,IAAV,iFAAGD,CAAH,iDAGU,SAACR,GAAD,OAAWA,EAAMU,MAAMI,WAG9BC,EA7Ba,SAAtBA,sBACJ,OACE,gBAACR,EAAD,KACE,gBAACM,EAAD,QCJSf","file":"authenticated.a8748fc153533417f958.js","sourcesContent":["// @flow\n\nexport function detectLanguage() {\n  const [ln, r] = navigator.language.split(\"-\");\n  const region = (r || ln).toUpperCase();\n  return `${ln}_${region}`;\n}\n\nexport function changeLanguage(toLanguageString: ?string, i18n: any) {\n  if (toLanguageString && i18n.language !== toLanguageString) {\n    // Languages are stored in en_US format in the database, however the\n    // frontend translation framework (i18next) expects en-US\n    i18n.changeLanguage(toLanguageString.replace(\"_\", \"-\"));\n  }\n}\n","// @flow\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect } from \"react-router-dom\";\nimport { isCustomSubdomain } from \"shared/utils/domains\";\nimport LoadingIndicator from \"components/LoadingIndicator\";\nimport useStores from \"../hooks/useStores\";\nimport { changeLanguage } from \"../utils/language\";\nimport env from \"env\";\n\ntype Props = {\n  children: React.Node,\n};\n\nconst Authenticated = ({ children }: Props) => {\n  const { auth } = useStores();\n  const { i18n } = useTranslation();\n  const language = auth.user && auth.user.language;\n\n  // Watching for language changes here as this is the earliest point we have\n  // the user available and means we can start loading translations faster\n  React.useEffect(() => {\n    changeLanguage(language, i18n);\n  }, [i18n, language]);\n\n  if (auth.authenticated) {\n    const { user, team } = auth;\n    const { hostname } = window.location;\n\n    if (!team || !user) {\n      return <LoadingIndicator />;\n    }\n\n    // If we're authenticated but viewing a domain that doesn't match the\n    // current team then kick the user to the teams correct domain.\n    if (team.domain) {\n      if (team.domain !== hostname) {\n        window.location.href = `${team.url}${window.location.pathname}`;\n        return <LoadingIndicator />;\n      }\n    } else if (\n      env.SUBDOMAINS_ENABLED &&\n      team.subdomain &&\n      isCustomSubdomain(hostname) &&\n      !hostname.startsWith(`${team.subdomain}.`)\n    ) {\n      window.location.href = `${team.url}${window.location.pathname}`;\n      return <LoadingIndicator />;\n    }\n\n    return children;\n  }\n\n  auth.logout(true);\n  return <Redirect to=\"/\" />;\n};\n\nexport default observer(Authenticated);\n","// @flow\nimport { inject, observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport UiStore from \"stores/UiStore\";\n\ntype Props = {\n  ui: UiStore,\n};\n\n@observer\nclass LoadingIndicator extends React.Component<Props> {\n  componentDidMount() {\n    this.props.ui.enableProgressBar();\n  }\n\n  componentWillUnmount() {\n    this.props.ui.disableProgressBar();\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default inject(\"ui\")(LoadingIndicator);\n","// @flow\nimport * as React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst LoadingIndicatorBar = () => {\n  return (\n    <Container>\n      <Loader />\n    </Container>\n  );\n};\n\nconst loadingFrame = keyframes`\n  from { margin-left: -100%; }\n  to { margin-left: 100%; }\n`;\n\nconst Container = styled.div`\n  position: fixed;\n  top: 0;\n  z-index: ${(props) => props.theme.depths.loadingIndicatorBar};\n  width: 100%;\n  animation: ${loadingFrame} 4s ease-in-out infinite;\n  animation-delay: 250ms;\n  margin-left: -100%;\n`;\n\nconst Loader = styled.div`\n  width: 100%;\n  height: 2px;\n  background-color: ${(props) => props.theme.primary};\n`;\n\nexport default LoadingIndicatorBar;\n","// @flow\nimport LoadingIndicator from \"./LoadingIndicator\";\nimport LoadingIndicatorBar from \"./LoadingIndicatorBar\";\nexport default LoadingIndicator;\nexport { LoadingIndicatorBar };\n"],"sourceRoot":""}