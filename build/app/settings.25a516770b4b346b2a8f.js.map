{"version":3,"sources":["webpack:///./app/components/Notice.js","webpack:///./app/scenes/Settings/Details.js","webpack:///./app/scenes/GroupDelete.js","webpack:///./app/scenes/GroupEdit.js","webpack:///./app/menus/GroupMenu.js","webpack:///./app/scenes/Settings/Groups.js","webpack:///./shared/utils/zip.js","webpack:///./app/scenes/Settings/ImportExport.js","webpack:///./app/components/Checkbox.js","webpack:///./app/scenes/Settings/components/NotificationListItem.js","webpack:///./app/scenes/Settings/Notifications.js","webpack:///./app/menus/UserMenu.js","webpack:///./app/scenes/Settings/components/PeopleTable.js","webpack:///./app/scenes/Settings/components/UserStatusFilter.js","webpack:///./app/scenes/Settings/People.js","webpack:///./app/scenes/UserDelete.js","webpack:///./app/scenes/Settings/Profile.js","webpack:///./app/scenes/Settings/Security.js","webpack:///./app/menus/ShareMenu.js","webpack:///./app/scenes/Settings/components/ShareListItem.js","webpack:///./app/scenes/Settings/Shares.js","webpack:///./app/components/List/index.js","webpack:///./app/components/List/List.js","webpack:///./app/scenes/Settings/components/SlackButton.js","webpack:///./app/scenes/Settings/Slack.js","webpack:///./app/scenes/APITokenNew.js","webpack:///./app/scenes/Settings/components/TokenListItem.js","webpack:///./app/scenes/Settings/Tokens.js","webpack:///./app/scenes/Settings/Zapier.js","webpack:///./app/routes/settings.js","webpack:///./app/utils/compressImage.js","webpack:///./app/hooks/useQuery.js","webpack:///./app/scenes/Settings/components/ImageUpload.js"],"names":["Notice","styled","p","props","theme","sidebarBackground","sidebarText","ProfilePicture","Flex","avatarStyles","AvatarContainer","white","Avatar","img","observer","Details","auth","useStores","showToast","useToasts","team","useCurrentTeam","t","useTranslation","form","useRef","useState","name","setName","subdomain","setSubdomain","avatarUrl","setAvatarUrl","handleSubmit","React","event","preventDefault","updateTeam","type","message","handleNameChange","ev","target","value","handleSubdomainChange","toLowerCase","handleAvatarUpload","handleAvatarError","error","isValid","current","checkValidity","Scene","title","icon","color","Heading","HelpText","Trans","column","ImageUpload","onSuccess","onError","submitText","borderRadius","src","auto","align","justify","onSubmit","ref","Input","label","autoComplete","onChange","required","short","env","SUBDOMAINS_ENABLED","minLength","maxLength","small","Button","disabled","isSaving","GroupDelete","group","history","useHistory","isDeleting","setIsDeleting","delete","push","groupSettings","defaults","values","groupName","components","em","danger","GroupEdit","setIsSaving","save","autoFocus","flex","GroupMenu","onMembers","policies","menu","useMenuState","modal","editModalOpen","setEditModalOpen","deleteModalOpen","setDeleteModalOpen","can","abilities","id","Modal","onRequestClose","isOpen","OverflowMenuButton","aria-label","ContextMenu","Template","items","onClick","visible","read","update","Groups","groups","useBoolean","newGroupModalOpen","handleNewGroupModalOpen","handleNewGroupModalClose","actions","createGroup","Subheading","PaginatedList","orderedData","empty","Empty","fetch","fetchPage","renderItem","item","GroupListItem","key","renderActions","openMembersModal","showFacepile","GroupNew","parseOutlineExport","input","JSZip","loadAsync","zip","forEach","rawPath","itemPath","replace","dir","path","dirname","basename","depth","split","length","startsWith","endsWith","metadata","comment","JSON","parse","err","console","log","Error","includes","List","ul","ImportPreview","ImportPreviewItem","li","CollectionName","span","ImportExport","user","useCurrentUser","fileRef","collections","isLoading","setLoading","isImporting","setImporting","isImported","setImported","isExporting","setExporting","file","setFile","importDetails","setImportDetails","handleImport","undefined","invariant","uploadFile","attachment","import","handleFilePicked","files","getDataTransferFiles","handlePickFile","click","handleExport","export","hasCollections","filter","detail","hasDocuments","isImportable","VisuallyHidden","accept","fileName","as","map","primary","userEmail","email","LabelText","textSecondary","Wrapper","div","Label","Checkbox","labelHidden","note","className","rest","wrappedLabel","NotificationListItem","setting","description","checked","Separator","hr","Notifications","notificationSettings","options","separator","showSuccessMessage","handleChange","getByEvent","showSuccessNotice","window","location","search","readOnly","option","index","isFetching","UserMenu","users","handlePromote","confirm","userName","promote","handleMember","demote","handleViewer","handleSuspend","suspend","handleRevoke","confirmation","handleActivate","activate","rank","isInvited","isSuspended","Table","Badges","PeopleTable","canManage","currentUser","columns","Header","accessor","Cell","row","gap","original","size","Time","dateTime","addSuffix","lastActiveAt","Badge","isAdmin","isViewer","i","UserStatusFilter","activeKey","onSelect","FilterOptions","defaultLabel","People","topRef","useLocation","inviteModalOpen","handleInviteModalOpen","handleInviteModalClose","params","useQuery","setIsLoading","data","setData","totalPages","setTotalPages","userIds","setUserIds","query","get","sort","direction","toUpperCase","page","parseInt","offset","limit","response","Math","ceil","PAGINATION_SYMBOL","total","u","fetchData","filtered","admins","suspended","invited","viewers","active","indexOf","handleFilter","set","pathname","toString","handleSearch","handleChangeSort","handleChangePage","scrollIntoView","scrollMode","behavior","block","inviteUser","data-on","data-event-category","data-event-action","signinMethods","InputSearch","placeholder","manage","onChangeSort","onChangePage","Invite","UserDelete","deleteUser","logout","Profile","updateUser","language","toasts","handleLanguageChange","toggleDeleteAccount","showDeleteModal","this","clearTimeout","timeout","InputSelect","languageOptions","href","rel","DangerZone","neutral","observable","withTranslation","inject","Security","sharing","documentEmbeds","guestSignin","newData","ShareMenu","share","shares","handleGoToDocument","documentUrl","revoke","handleCopy","CopyToClipboard","text","url","onCopy","MenuItem","ShareListItem","lastAccessedAt","documentTitle","subtitle","createdAt","createdBy","Shares","canShareDocuments","to","published","ol","SlackButton","state","scopes","redirectUri","handleClick","slackAuth","SLACK_KEY","SlackIcon","fill","Code","code","codeBackground","Slack","integrations","commandIntegration","slackIntegrations","command","URL","collection","integration","collectionId","image","CollectionIcon","channelName","settings","channel","APITokenNew","apiKeys","create","TokenListItem","token","onDelete","secret","Tokens","newModalOpen","handleNewModalOpen","handleNewModalClose","createApiKey","heading","sticky","Zapier","ZapierIcon","SettingsRoutes","exact","component","from","compressImage","Promise","resolve","reject","Compressor","success","URLSearchParams","EMPTY_OBJECT","onDropAccepted","isCropping","handleCrop","isUploading","setImmediate","uploadImage","canvas","avatarEditorRef","getImage","imageBlob","dataUrlToBlob","toDataURL","maxHeight","maxWidth","compressed","public","handleClose","handleZoom","HTMLInputElement","zoom","parseFloat","ui","AvatarEditorContainer","width","height","border","scale","rotate","RangeInput","min","max","step","defaultValue","CropButton","renderCropping","style","disablePreview","getRootProps","getInputProps","isDragActive","children","defaultProps"],"mappings":"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","file":"settings.25a516770b4b346b2a8f.js","sourcesContent":["// @flow\nimport styled from \"styled-components\";\n\nconst Notice = styled.p`\n  background: ${(props) => props.theme.sidebarBackground};\n  color: ${(props) => props.theme.sidebarText};\n  padding: 10px 12px;\n  border-radius: 4px;\n  position: relative;\n`;\n\nexport default Notice;\n","// @flow\nimport { observer } from \"mobx-react\";\nimport { TeamIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useRef, useState } from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport Button from \"components/Button\";\nimport Flex from \"components/Flex\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport Input, { LabelText } from \"components/Input\";\nimport Scene from \"components/Scene\";\nimport ImageUpload from \"./components/ImageUpload\";\nimport env from \"env\";\nimport useCurrentTeam from \"hooks/useCurrentTeam\";\nimport useStores from \"hooks/useStores\";\nimport useToasts from \"hooks/useToasts\";\n\nfunction Details() {\n  const { auth } = useStores();\n  const { showToast } = useToasts();\n  const team = useCurrentTeam();\n  const { t } = useTranslation();\n  const form = useRef<?HTMLFormElement>();\n  const [name, setName] = useState(team.name);\n  const [subdomain, setSubdomain] = useState(team.subdomain);\n  const [avatarUrl, setAvatarUrl] = useState();\n\n  const handleSubmit = React.useCallback(\n    async (event: ?SyntheticEvent<>) => {\n      if (event) {\n        event.preventDefault();\n      }\n\n      try {\n        await auth.updateTeam({\n          name,\n          avatarUrl,\n          subdomain,\n        });\n        showToast(t(\"Settings saved\"), { type: \"success\" });\n      } catch (err) {\n        showToast(err.message, { type: \"error\" });\n      }\n    },\n    [auth, showToast, name, avatarUrl, subdomain, t]\n  );\n\n  const handleNameChange = React.useCallback((ev: SyntheticInputEvent<*>) => {\n    setName(ev.target.value);\n  }, []);\n\n  const handleSubdomainChange = React.useCallback(\n    (ev: SyntheticInputEvent<*>) => {\n      setSubdomain(ev.target.value.toLowerCase());\n    },\n    []\n  );\n\n  const handleAvatarUpload = React.useCallback(\n    (avatarUrl: string) => {\n      setAvatarUrl(avatarUrl);\n      handleSubmit();\n    },\n    [handleSubmit]\n  );\n\n  const handleAvatarError = React.useCallback(\n    (error: ?string) => {\n      showToast(error || t(\"Unable to upload new logo\"));\n    },\n    [showToast, t]\n  );\n\n  const isValid = form.current && form.current.checkValidity();\n\n  return (\n    <Scene title={t(\"Details\")} icon={<TeamIcon color=\"currentColor\" />}>\n      <Heading>{t(\"Details\")}</Heading>\n      <HelpText>\n        <Trans>\n          These details affect the way that your Outline appears to everyone on\n          the team.\n        </Trans>\n      </HelpText>\n\n      <ProfilePicture column>\n        <LabelText>{t(\"Logo\")}</LabelText>\n        <AvatarContainer>\n          <ImageUpload\n            onSuccess={handleAvatarUpload}\n            onError={handleAvatarError}\n            submitText={t(\"Crop logo\")}\n            borderRadius={0}\n          >\n            <Avatar src={avatarUrl} />\n            <Flex auto align=\"center\" justify=\"center\">\n              <Trans>Upload</Trans>\n            </Flex>\n          </ImageUpload>\n        </AvatarContainer>\n      </ProfilePicture>\n      <form onSubmit={handleSubmit} ref={form}>\n        <Input\n          label={t(\"Name\")}\n          name=\"name\"\n          autoComplete=\"organization\"\n          value={name}\n          onChange={handleNameChange}\n          required\n          short\n        />\n        {env.SUBDOMAINS_ENABLED && (\n          <>\n            <Input\n              label={t(\"Subdomain\")}\n              name=\"subdomain\"\n              value={subdomain || \"\"}\n              onChange={handleSubdomainChange}\n              autoComplete=\"off\"\n              minLength={4}\n              maxLength={32}\n              short\n            />\n            {subdomain && (\n              <HelpText small>\n                <Trans>Your knowledge base will be accessible at</Trans>{\" \"}\n                <strong>{subdomain}.getoutline.com</strong>\n              </HelpText>\n            )}\n          </>\n        )}\n        <Button type=\"submit\" disabled={auth.isSaving || !isValid}>\n          {auth.isSaving ? `${t(\"Saving\")}…` : t(\"Save\")}\n        </Button>\n      </form>\n    </Scene>\n  );\n}\n\nconst ProfilePicture = styled(Flex)`\n  margin-bottom: 24px;\n`;\n\nconst avatarStyles = `\n  width: 80px;\n  height: 80px;\n  border-radius: 8px;\n`;\n\nconst AvatarContainer = styled(Flex)`\n  ${avatarStyles};\n  position: relative;\n  box-shadow: 0 0 0 1px #dae1e9;\n  background: ${(props) => props.theme.white};\n\n  div div {\n    ${avatarStyles};\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    opacity: 0;\n    cursor: pointer;\n    transition: all 250ms;\n  }\n\n  &:hover div {\n    opacity: 1;\n    background: rgba(0, 0, 0, 0.75);\n    color: ${(props) => props.theme.white};\n  }\n`;\n\nconst Avatar = styled.img`\n  ${avatarStyles};\n`;\n\nexport default observer(Details);\n","// @flow\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { groupSettings } from \"shared/utils/routeHelpers\";\nimport Group from \"models/Group\";\nimport Button from \"components/Button\";\nimport Flex from \"components/Flex\";\nimport HelpText from \"components/HelpText\";\nimport useToasts from \"hooks/useToasts\";\n\ntype Props = {|\n  group: Group,\n  onSubmit: () => void,\n|};\n\nfunction GroupDelete({ group, onSubmit }: Props) {\n  const { t } = useTranslation();\n  const { showToast } = useToasts();\n  const history = useHistory();\n  const [isDeleting, setIsDeleting] = React.useState();\n\n  const handleSubmit = async (ev: SyntheticEvent<>) => {\n    ev.preventDefault();\n    setIsDeleting(true);\n\n    try {\n      await group.delete();\n      history.push(groupSettings());\n      onSubmit();\n    } catch (err) {\n      showToast(err.message, { type: \"error\" });\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  return (\n    <Flex column>\n      <form onSubmit={handleSubmit}>\n        <HelpText>\n          <Trans\n            defaults=\"Are you sure about that? Deleting the <em>{{groupName}}</em> group will cause its members to lose access to collections and documents that it is associated with.\"\n            values={{ groupName: group.name }}\n            components={{ em: <strong /> }}\n          />\n        </HelpText>\n        <Button type=\"submit\" danger>\n          {isDeleting ? `${t(\"Deleting\")}…` : t(\"I’m sure – Delete\")}\n        </Button>\n      </form>\n    </Flex>\n  );\n}\n\nexport default observer(GroupDelete);\n","// @flow\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport Group from \"models/Group\";\nimport Button from \"components/Button\";\nimport Flex from \"components/Flex\";\nimport HelpText from \"components/HelpText\";\nimport Input from \"components/Input\";\nimport useToasts from \"hooks/useToasts\";\n\ntype Props = {\n  group: Group,\n  onSubmit: () => void,\n};\n\nfunction GroupEdit({ group, onSubmit }: Props) {\n  const { showToast } = useToasts();\n  const { t } = useTranslation();\n  const [name, setName] = React.useState(group.name);\n  const [isSaving, setIsSaving] = React.useState();\n\n  const handleSubmit = React.useCallback(\n    async (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      setIsSaving(true);\n\n      try {\n        await group.save({ name: name });\n        onSubmit();\n      } catch (err) {\n        showToast(err.message, { type: \"error\" });\n      } finally {\n        setIsSaving(false);\n      }\n    },\n    [group, onSubmit, showToast, name]\n  );\n\n  const handleNameChange = React.useCallback((ev: SyntheticInputEvent<*>) => {\n    setName(ev.target.value);\n  }, []);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <HelpText>\n        <Trans>\n          You can edit the name of this group at any time, however doing so too\n          often might confuse your team mates.\n        </Trans>\n      </HelpText>\n      <Flex>\n        <Input\n          type=\"text\"\n          label={t(\"Name\")}\n          onChange={handleNameChange}\n          value={name}\n          required\n          autoFocus\n          flex\n        />\n      </Flex>\n\n      <Button type=\"submit\" disabled={isSaving || !name}>\n        {isSaving ? `${t(\"Saving\")}…` : t(\"Save\")}\n      </Button>\n    </form>\n  );\n}\n\nexport default observer(GroupEdit);\n","// @flow\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMenuState } from \"reakit/Menu\";\nimport Group from \"models/Group\";\nimport GroupDelete from \"scenes/GroupDelete\";\nimport GroupEdit from \"scenes/GroupEdit\";\nimport ContextMenu from \"components/ContextMenu\";\nimport OverflowMenuButton from \"components/ContextMenu/OverflowMenuButton\";\nimport Template from \"components/ContextMenu/Template\";\nimport Modal from \"components/Modal\";\nimport useStores from \"hooks/useStores\";\n\ntype Props = {|\n  group: Group,\n  onMembers: () => void,\n|};\n\nfunction GroupMenu({ group, onMembers }: Props) {\n  const { t } = useTranslation();\n  const { policies } = useStores();\n  const menu = useMenuState({ modal: true });\n  const [editModalOpen, setEditModalOpen] = React.useState(false);\n  const [deleteModalOpen, setDeleteModalOpen] = React.useState(false);\n  const can = policies.abilities(group.id);\n\n  return (\n    <>\n      <Modal\n        title={t(\"Edit group\")}\n        onRequestClose={() => setEditModalOpen(false)}\n        isOpen={editModalOpen}\n      >\n        <GroupEdit group={group} onSubmit={() => setEditModalOpen(false)} />\n      </Modal>\n      <Modal\n        title={t(\"Delete group\")}\n        onRequestClose={() => setDeleteModalOpen(false)}\n        isOpen={deleteModalOpen}\n      >\n        <GroupDelete group={group} onSubmit={() => setDeleteModalOpen(false)} />\n      </Modal>\n      <OverflowMenuButton aria-label={t(\"Show menu\")} {...menu} />\n      <ContextMenu {...menu} aria-label={t(\"Group options\")}>\n        <Template\n          {...menu}\n          items={[\n            {\n              title: `${t(\"Members\")}…`,\n              onClick: onMembers,\n              visible: !!(group && can.read),\n            },\n            {\n              type: \"separator\",\n            },\n            {\n              title: `${t(\"Edit\")}…`,\n              onClick: () => setEditModalOpen(true),\n              visible: !!(group && can.update),\n            },\n            {\n              title: `${t(\"Delete\")}…`,\n              onClick: () => setDeleteModalOpen(true),\n              visible: !!(group && can.delete),\n            },\n          ]}\n        />\n      </ContextMenu>\n    </>\n  );\n}\n\nexport default observer(GroupMenu);\n","// @flow\nimport { observer } from \"mobx-react\";\nimport { PlusIcon, GroupIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport GroupNew from \"scenes/GroupNew\";\nimport { Action } from \"components/Actions\";\nimport Button from \"components/Button\";\nimport Empty from \"components/Empty\";\nimport GroupListItem from \"components/GroupListItem\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport Modal from \"components/Modal\";\nimport PaginatedList from \"components/PaginatedList\";\nimport Scene from \"components/Scene\";\nimport Subheading from \"components/Subheading\";\nimport useBoolean from \"hooks/useBoolean\";\nimport useCurrentTeam from \"hooks/useCurrentTeam\";\nimport useStores from \"hooks/useStores\";\nimport GroupMenu from \"menus/GroupMenu\";\n\nfunction Groups() {\n  const { t } = useTranslation();\n  const { policies, groups } = useStores();\n  const team = useCurrentTeam();\n  const can = policies.abilities(team.id);\n  const [\n    newGroupModalOpen,\n    handleNewGroupModalOpen,\n    handleNewGroupModalClose,\n  ] = useBoolean();\n\n  return (\n    <Scene\n      title={t(\"Groups\")}\n      icon={<GroupIcon color=\"currentColor\" />}\n      actions={\n        <>\n          {can.createGroup && (\n            <Action>\n              <Button\n                type=\"button\"\n                onClick={handleNewGroupModalOpen}\n                icon={<PlusIcon />}\n              >\n                {`${t(\"New group\")}…`}\n              </Button>\n            </Action>\n          )}\n        </>\n      }\n    >\n      <Heading>{t(\"Groups\")}</Heading>\n      <HelpText>\n        <Trans>\n          Groups can be used to organize and manage the people on your team.\n        </Trans>\n      </HelpText>\n      <Subheading>{t(\"All groups\")}</Subheading>\n      <PaginatedList\n        items={groups.orderedData}\n        empty={<Empty>{t(\"No groups have been created yet\")}</Empty>}\n        fetch={groups.fetchPage}\n        renderItem={(item) => (\n          <GroupListItem\n            key={item.id}\n            group={item}\n            renderActions={({ openMembersModal }) => (\n              <GroupMenu group={item} onMembers={openMembersModal} />\n            )}\n            showFacepile\n          />\n        )}\n      />\n\n      <Modal\n        title={t(\"Create a group\")}\n        onRequestClose={handleNewGroupModalClose}\n        isOpen={newGroupModalOpen}\n      >\n        <GroupNew onSubmit={handleNewGroupModalClose} />\n      </Modal>\n    </Scene>\n  );\n}\n\nexport default observer(Groups);\n","// @flow\nimport path from \"path\";\nimport JSZip, { ZipObject } from \"jszip\";\n\nexport type Item = {|\n  path: string,\n  dir: string,\n  name: string,\n  depth: number,\n  metadata: Object,\n  type: \"collection\" | \"document\" | \"attachment\",\n  item: ZipObject,\n|};\n\nexport async function parseOutlineExport(\n  input: File | Buffer\n): Promise<Item[]> {\n  const zip = await JSZip.loadAsync(input);\n\n  // this is so we can use async / await a little easier\n  let items: Item[] = [];\n  zip.forEach(async function (rawPath, item) {\n    const itemPath = rawPath.replace(/\\/$/, \"\");\n    const dir = path.dirname(itemPath);\n    const name = path.basename(item.name);\n    const depth = itemPath.split(\"/\").length - 1;\n\n    // known skippable items\n    if (itemPath.startsWith(\"__MACOSX\") || itemPath.endsWith(\".DS_Store\")) {\n      return;\n    }\n\n    // attempt to parse extra metadata from zip comment\n    let metadata = {};\n    try {\n      metadata = item.comment ? JSON.parse(item.comment) : {};\n    } catch (err) {\n      console.log(\n        `ZIP comment found for ${item.name}, but could not be parsed as metadata: ${item.comment}`\n      );\n    }\n\n    if (depth === 0 && !item.dir) {\n      throw new Error(\n        \"Root of zip file must only contain folders representing collections\"\n      );\n    }\n\n    let type;\n    if (depth === 0 && item.dir && name) {\n      type = \"collection\";\n    }\n    if (depth > 0 && !item.dir && item.name.endsWith(\".md\")) {\n      type = \"document\";\n    }\n    if (depth > 0 && !item.dir && itemPath.includes(\"uploads\")) {\n      type = \"attachment\";\n    }\n\n    if (!type) {\n      return;\n    }\n\n    items.push({\n      path: itemPath,\n      dir,\n      name,\n      depth,\n      type,\n      metadata,\n      item,\n    });\n  });\n\n  return items;\n}\n","// @flow\nimport invariant from \"invariant\";\nimport { observer } from \"mobx-react\";\nimport { CollectionIcon, DocumentIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { VisuallyHidden } from \"reakit/VisuallyHidden\";\nimport styled from \"styled-components\";\nimport { parseOutlineExport } from \"shared/utils/zip\";\nimport Button from \"components/Button\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport Notice from \"components/Notice\";\nimport Scene from \"components/Scene\";\nimport useCurrentUser from \"hooks/useCurrentUser\";\nimport useStores from \"hooks/useStores\";\nimport useToasts from \"hooks/useToasts\";\nimport getDataTransferFiles from \"utils/getDataTransferFiles\";\nimport { uploadFile } from \"utils/uploadFile\";\n\nfunction ImportExport() {\n  const { t } = useTranslation();\n  const user = useCurrentUser();\n  const fileRef = React.useRef();\n  const { collections } = useStores();\n  const { showToast } = useToasts();\n  const [isLoading, setLoading] = React.useState(false);\n  const [isImporting, setImporting] = React.useState(false);\n  const [isImported, setImported] = React.useState(false);\n  const [isExporting, setExporting] = React.useState(false);\n  const [file, setFile] = React.useState();\n  const [importDetails, setImportDetails] = React.useState();\n\n  const handleImport = React.useCallback(\n    async (ev) => {\n      setImported(undefined);\n      setImporting(true);\n\n      try {\n        invariant(file, \"File must exist to upload\");\n        const attachment = await uploadFile(file, {\n          name: file.name,\n        });\n        await collections.import(attachment.id);\n        showToast(t(\"Import started\"));\n        setImported(true);\n      } catch (err) {\n        showToast(err.message);\n      } finally {\n        if (fileRef.current) {\n          fileRef.current.value = \"\";\n        }\n        setImporting(false);\n        setFile(undefined);\n        setImportDetails(undefined);\n      }\n    },\n    [t, file, collections, showToast]\n  );\n\n  const handleFilePicked = React.useCallback(async (ev) => {\n    ev.preventDefault();\n\n    const files = getDataTransferFiles(ev);\n    const file = files[0];\n    setFile(file);\n\n    try {\n      setImportDetails(await parseOutlineExport(file));\n    } catch (err) {\n      setImportDetails([]);\n    }\n  }, []);\n\n  const handlePickFile = React.useCallback(\n    (ev) => {\n      ev.preventDefault();\n\n      if (fileRef.current) {\n        fileRef.current.click();\n      }\n    },\n    [fileRef]\n  );\n\n  const handleExport = React.useCallback(\n    async (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      setLoading(true);\n\n      try {\n        await collections.export();\n        setExporting(true);\n        showToast(t(\"Export in progress…\"));\n      } finally {\n        setLoading(false);\n      }\n    },\n    [t, collections, showToast]\n  );\n\n  const hasCollections = importDetails\n    ? !!importDetails.filter((detail) => detail.type === \"collection\").length\n    : false;\n  const hasDocuments = importDetails\n    ? !!importDetails.filter((detail) => detail.type === \"document\").length\n    : false;\n  const isImportable = hasCollections && hasDocuments;\n\n  return (\n    <Scene\n      title={`${t(\"Import\")} / ${t(\"Export\")}`}\n      icon={<DocumentIcon color=\"currentColor\" />}\n    >\n      <Heading>{t(\"Import\")}</Heading>\n      <HelpText>\n        <Trans>\n          It is possible to import a zip file of folders and Markdown files\n          previously exported from an Outline instance. Support will soon be\n          added for importing from other services.\n        </Trans>\n      </HelpText>\n      <VisuallyHidden>\n        <input\n          type=\"file\"\n          ref={fileRef}\n          onChange={handleFilePicked}\n          accept=\"application/zip\"\n        />\n      </VisuallyHidden>\n      {isImported && (\n        <Notice>\n          <Trans>\n            Your file has been uploaded and the import is currently being\n            processed, you can safely leave this page while it completes.\n          </Trans>\n        </Notice>\n      )}\n      {file && !isImportable && (\n        <ImportPreview>\n          <Trans\n            defaults=\"Sorry, the file <em>{{ fileName }}</em> is missing valid collections or documents.\"\n            values={{ fileName: file.name }}\n            components={{ em: <strong /> }}\n          />\n        </ImportPreview>\n      )}\n      {file && importDetails && isImportable ? (\n        <>\n          <ImportPreview as=\"div\">\n            <Trans\n              defaults=\"<em>{{ fileName }}</em> looks good, the following collections and their documents will be imported:\"\n              values={{ fileName: file.name }}\n              components={{ em: <strong /> }}\n            />\n            <List>\n              {importDetails\n                .filter((detail) => detail.type === \"collection\")\n                .map((detail) => (\n                  <ImportPreviewItem key={detail.path}>\n                    <CollectionIcon />\n                    <CollectionName>{detail.name}</CollectionName>\n                  </ImportPreviewItem>\n                ))}\n            </List>\n          </ImportPreview>\n          <Button\n            type=\"submit\"\n            onClick={handleImport}\n            disabled={isImporting}\n            primary\n          >\n            {isImporting ? `${t(\"Uploading\")}…` : t(\"Confirm & Import\")}\n          </Button>\n        </>\n      ) : (\n        <Button type=\"submit\" onClick={handlePickFile} primary>\n          {t(\"Choose File\")}…\n        </Button>\n      )}\n\n      <Heading>{t(\"Export\")}</Heading>\n      <HelpText>\n        <Trans\n          defaults=\"A full export might take some time, consider exporting a single document or collection if possible. We’ll put together a zip of all your documents in Markdown format and email it to <em>{{ userEmail }}</em>.\"\n          values={{ userEmail: user.email }}\n          components={{ em: <strong /> }}\n        />\n      </HelpText>\n      <Button\n        type=\"submit\"\n        onClick={handleExport}\n        disabled={isLoading || isExporting}\n        primary\n      >\n        {isExporting\n          ? t(\"Export Requested\")\n          : isLoading\n          ? `${t(\"Requesting Export\")}…`\n          : t(\"Export Data\")}\n      </Button>\n    </Scene>\n  );\n}\n\nconst List = styled.ul`\n  padding: 0;\n  margin: 8px 0 0;\n`;\n\nconst ImportPreview = styled(Notice)`\n  margin-bottom: 16px;\n`;\n\nconst ImportPreviewItem = styled.li`\n  display: flex;\n  align-items: center;\n  list-style: none;\n`;\n\nconst CollectionName = styled.span`\n  font-weight: 500;\n  margin-left: 4px;\n`;\n\nexport default observer(ImportExport);\n","// @flow\nimport * as React from \"react\";\nimport { VisuallyHidden } from \"reakit/VisuallyHidden\";\nimport styled from \"styled-components\";\nimport HelpText from \"components/HelpText\";\n\nexport type Props = {|\n  checked?: boolean,\n  label?: React.Node,\n  labelHidden?: boolean,\n  className?: string,\n  name?: string,\n  disabled?: boolean,\n  onChange: (event: SyntheticInputEvent<HTMLInputElement>) => mixed,\n  note?: string,\n  short?: boolean,\n  small?: boolean,\n|};\n\nconst LabelText = styled.span`\n  font-weight: 500;\n  margin-left: ${(props) => (props.small ? \"6px\" : \"10px\")};\n  ${(props) => (props.small ? `color: ${props.theme.textSecondary}` : \"\")};\n`;\n\nconst Wrapper = styled.div`\n  padding-bottom: 8px;\n  ${(props) => (props.small ? \"font-size: 14px\" : \"\")};\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  align-items: center;\n  user-select: none;\n`;\n\nexport default function Checkbox({\n  label,\n  labelHidden,\n  note,\n  className,\n  small,\n  short,\n  ...rest\n}: Props) {\n  const wrappedLabel = <LabelText small={small}>{label}</LabelText>;\n\n  return (\n    <>\n      <Wrapper small={small}>\n        <Label>\n          <input type=\"checkbox\" {...rest} />\n          {label &&\n            (labelHidden ? (\n              <VisuallyHidden>{wrappedLabel}</VisuallyHidden>\n            ) : (\n              wrappedLabel\n            ))}\n        </Label>\n        {note && <HelpText small>{note}</HelpText>}\n      </Wrapper>\n    </>\n  );\n}\n","// @flow\nimport * as React from \"react\";\nimport NotificationSetting from \"models/NotificationSetting\";\nimport Checkbox from \"components/Checkbox\";\n\ntype Props = {\n  setting?: NotificationSetting,\n  title: string,\n  event: string,\n  description: string,\n  disabled: boolean,\n  onChange: (ev: SyntheticInputEvent<>) => void | Promise<void>,\n};\n\nconst NotificationListItem = ({\n  setting,\n  title,\n  event,\n  onChange,\n  disabled,\n  description,\n}: Props) => {\n  return (\n    <Checkbox\n      label={title}\n      name={event}\n      checked={!!setting}\n      onChange={onChange}\n      note={description}\n      disabled={disabled}\n    />\n  );\n};\n\nexport default NotificationListItem;\n","// @flow\nimport { debounce } from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport { EmailIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport Input from \"components/Input\";\nimport Notice from \"components/Notice\";\nimport Scene from \"components/Scene\";\nimport Subheading from \"components/Subheading\";\nimport NotificationListItem from \"./components/NotificationListItem\";\nimport useCurrentUser from \"hooks/useCurrentUser\";\nimport useStores from \"hooks/useStores\";\nimport useToasts from \"hooks/useToasts\";\n\nfunction Notifications() {\n  const { notificationSettings } = useStores();\n  const { showToast } = useToasts();\n  const user = useCurrentUser();\n  const { t } = useTranslation();\n\n  const options = [\n    {\n      event: \"documents.publish\",\n      title: t(\"Document published\"),\n      description: t(\n        \"Receive a notification whenever a new document is published\"\n      ),\n    },\n    {\n      event: \"documents.update\",\n      title: t(\"Document updated\"),\n      description: t(\n        \"Receive a notification when a document you created is edited\"\n      ),\n    },\n    {\n      event: \"collections.create\",\n      title: t(\"Collection created\"),\n      description: t(\n        \"Receive a notification whenever a new collection is created\"\n      ),\n    },\n    {\n      separator: true,\n    },\n    {\n      event: \"emails.onboarding\",\n      title: t(\"Getting started\"),\n      description: t(\n        \"Tips on getting started with Outline`s features and functionality\"\n      ),\n    },\n    {\n      event: \"emails.features\",\n      title: t(\"New features\"),\n      description: t(\"Receive an email when new features of note are added\"),\n    },\n  ];\n\n  React.useEffect(() => {\n    notificationSettings.fetchPage();\n  }, [notificationSettings]);\n\n  const showSuccessMessage = debounce(() => {\n    showToast(t(\"Notifications saved\"), { type: \"success\" });\n  }, 500);\n\n  const handleChange = React.useCallback(\n    async (ev: SyntheticInputEvent<>) => {\n      const setting = notificationSettings.getByEvent(ev.target.name);\n\n      if (ev.target.checked) {\n        await notificationSettings.save({\n          event: ev.target.name,\n        });\n      } else if (setting) {\n        await notificationSettings.delete(setting);\n      }\n\n      showSuccessMessage();\n    },\n    [notificationSettings, showSuccessMessage]\n  );\n\n  const showSuccessNotice = window.location.search === \"?success\";\n\n  return (\n    <Scene title={t(\"Notifications\")} icon={<EmailIcon color=\"currentColor\" />}>\n      {showSuccessNotice && (\n        <Notice>\n          <Trans>\n            Unsubscription successful. Your notification settings were updated\n          </Trans>\n        </Notice>\n      )}\n      <Heading>{t(\"Notifications\")}</Heading>\n      <HelpText>\n        <Trans>\n          Manage when and where you receive email notifications from Outline.\n          Your email address can be updated in your SSO provider.\n        </Trans>\n      </HelpText>\n      <Input\n        type=\"email\"\n        value={user.email}\n        label={t(\"Email address\")}\n        readOnly\n        short\n      />\n\n      <Subheading>{t(\"Notifications\")}</Subheading>\n\n      {options.map((option, index) => {\n        if (option.separator) return <Separator key={`separator-${index}`} />;\n\n        const setting = notificationSettings.getByEvent(option.event);\n\n        return (\n          <NotificationListItem\n            key={option.event}\n            onChange={handleChange}\n            setting={setting}\n            disabled={\n              (setting && setting.isSaving) || notificationSettings.isFetching\n            }\n            {...option}\n          />\n        );\n      })}\n    </Scene>\n  );\n}\n\nconst Separator = styled.hr`\n  padding-bottom: 12px;\n`;\n\nexport default observer(Notifications);\n","// @flow\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMenuState } from \"reakit/Menu\";\nimport User from \"models/User\";\nimport ContextMenu from \"components/ContextMenu\";\nimport OverflowMenuButton from \"components/ContextMenu/OverflowMenuButton\";\nimport Template from \"components/ContextMenu/Template\";\nimport useStores from \"hooks/useStores\";\n\ntype Props = {|\n  user: User,\n|};\n\nfunction UserMenu({ user }: Props) {\n  const { users, policies } = useStores();\n  const { t } = useTranslation();\n  const menu = useMenuState({ modal: true });\n  const can = policies.abilities(user.id);\n\n  const handlePromote = React.useCallback(\n    (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      if (\n        !window.confirm(\n          t(\n            \"Are you sure you want to make {{ userName }} an admin? Admins can modify team and billing information.\",\n            { userName: user.name }\n          )\n        )\n      ) {\n        return;\n      }\n      users.promote(user);\n    },\n    [users, user, t]\n  );\n\n  const handleMember = React.useCallback(\n    (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      if (\n        !window.confirm(\n          t(\"Are you sure you want to make {{ userName }} a member?\", {\n            userName: user.name,\n          })\n        )\n      ) {\n        return;\n      }\n      users.demote(user, \"Member\");\n    },\n    [users, user, t]\n  );\n\n  const handleViewer = React.useCallback(\n    (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      if (\n        !window.confirm(\n          t(\n            \"Are you sure you want to make {{ userName }} a read-only viewer? They will not be able to edit any content\",\n            {\n              userName: user.name,\n            }\n          )\n        )\n      ) {\n        return;\n      }\n      users.demote(user, \"Viewer\");\n    },\n    [users, user, t]\n  );\n\n  const handleSuspend = React.useCallback(\n    (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      if (\n        !window.confirm(\n          t(\n            \"Are you sure you want to suspend this account? Suspended users will be prevented from logging in.\"\n          )\n        )\n      ) {\n        return;\n      }\n      users.suspend(user);\n    },\n    [users, user, t]\n  );\n\n  const handleRevoke = React.useCallback(\n    (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      users.delete(user, { confirmation: true });\n    },\n    [users, user]\n  );\n\n  const handleActivate = React.useCallback(\n    (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      users.activate(user);\n    },\n    [users, user]\n  );\n\n  return (\n    <>\n      <OverflowMenuButton aria-label={t(\"Show menu\")} {...menu} />\n      <ContextMenu {...menu} aria-label={t(\"User options\")}>\n        <Template\n          {...menu}\n          items={[\n            {\n              title: t(\"Make {{ userName }} a member\", {\n                userName: user.name,\n              }),\n              onClick: handleMember,\n              visible: can.demote && user.rank !== \"Member\",\n            },\n            {\n              title: t(\"Make {{ userName }} a viewer\", {\n                userName: user.name,\n              }),\n              onClick: handleViewer,\n              visible: can.demote && user.rank !== \"Viewer\",\n            },\n            {\n              title: t(\"Make {{ userName }} an admin…\", {\n                userName: user.name,\n              }),\n              onClick: handlePromote,\n              visible: can.promote && user.rank !== \"Admin\",\n            },\n            {\n              type: \"separator\",\n            },\n            {\n              title: `${t(\"Revoke invite\")}…`,\n              onClick: handleRevoke,\n              visible: user.isInvited,\n            },\n            {\n              title: t(\"Activate account\"),\n              onClick: handleActivate,\n              visible: !user.isInvited && user.isSuspended,\n            },\n            {\n              title: `${t(\"Suspend account\")}…`,\n              onClick: handleSuspend,\n              visible: !user.isInvited && !user.isSuspended,\n            },\n          ]}\n        />\n      </ContextMenu>\n    </>\n  );\n}\n\nexport default observer(UserMenu);\n","// @flow\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport User from \"models/User\";\nimport Avatar from \"components/Avatar\";\nimport Badge from \"components/Badge\";\nimport Flex from \"components/Flex\";\nimport { type Props as TableProps } from \"components/Table\";\nimport Time from \"components/Time\";\nimport useCurrentUser from \"hooks/useCurrentUser\";\nimport UserMenu from \"menus/UserMenu\";\n\nconst Table = React.lazy<TableProps>(() =>\n  import(/* webpackChunkName: \"table\" */ \"components/Table\")\n);\n\ntype Props = {|\n  ...$Diff<TableProps, { columns: any }>,\n  data: User[],\n  canManage: boolean,\n|};\n\nfunction PeopleTable({ canManage, ...rest }: Props) {\n  const { t } = useTranslation();\n  const currentUser = useCurrentUser();\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          id: \"name\",\n          Header: t(\"Name\"),\n          accessor: \"name\",\n          Cell: observer(({ value, row }) => (\n            <Flex align=\"center\" gap={8}>\n              <Avatar src={row.original.avatarUrl} size={32} /> {value}{\" \"}\n              {currentUser.id === row.original.id && `(${t(\"You\")})`}\n            </Flex>\n          )),\n        },\n        canManage\n          ? {\n              id: \"email\",\n              Header: t(\"Email\"),\n              accessor: \"email\",\n              Cell: observer(({ value }) => value),\n            }\n          : undefined,\n        {\n          id: \"lastActiveAt\",\n          Header: t(\"Last active\"),\n          accessor: \"lastActiveAt\",\n          Cell: observer(\n            ({ value }) => value && <Time dateTime={value} addSuffix />\n          ),\n        },\n        {\n          id: \"isAdmin\",\n          Header: t(\"Role\"),\n          accessor: \"rank\",\n          Cell: observer(({ row }) => (\n            <Badges>\n              {!row.original.lastActiveAt && <Badge>{t(\"Invited\")}</Badge>}\n              {row.original.isAdmin && <Badge primary>{t(\"Admin\")}</Badge>}\n              {row.original.isViewer && <Badge>{t(\"Viewer\")}</Badge>}\n              {row.original.isSuspended && <Badge>{t(\"Suspended\")}</Badge>}\n            </Badges>\n          )),\n        },\n        canManage\n          ? {\n              Header: \" \",\n              accessor: \"id\",\n              className: \"actions\",\n              Cell: observer(\n                ({ row, value }) =>\n                  currentUser.id !== value && <UserMenu user={row.original} />\n              ),\n            }\n          : undefined,\n      ].filter((i) => i),\n    [t, canManage, currentUser]\n  );\n\n  return <Table columns={columns} {...rest} />;\n}\n\nconst Badges = styled.div`\n  margin-left: -10px;\n`;\n\nexport default PeopleTable;\n","// @flow\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport FilterOptions from \"components/FilterOptions\";\n\ntype Props = {|\n  activeKey: string,\n  onSelect: (key: ?string) => void,\n|};\n\nconst UserStatusFilter = ({ activeKey, onSelect }: Props) => {\n  const { t } = useTranslation();\n\n  const options = React.useMemo(\n    () => [\n      {\n        key: \"\",\n        label: t(\"Active\"),\n      },\n      {\n        key: \"all\",\n        label: t(\"Everyone\"),\n      },\n      {\n        key: \"admins\",\n        label: t(\"Admins\"),\n      },\n      {\n        key: \"suspended\",\n        label: t(\"Suspended\"),\n      },\n      {\n        key: \"invited\",\n        label: t(\"Invited\"),\n      },\n      {\n        key: \"viewers\",\n        label: t(\"Viewers\"),\n      },\n    ],\n    [t]\n  );\n\n  return (\n    <FilterOptions\n      options={options}\n      activeKey={activeKey}\n      onSelect={onSelect}\n      defaultLabel={t(\"Active\")}\n    />\n  );\n};\n\nexport default UserStatusFilter;\n","// @flow\nimport { sortBy } from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport { PlusIcon, UserIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport scrollIntoView from \"smooth-scroll-into-view-if-needed\";\nimport { PAGINATION_SYMBOL } from \"stores/BaseStore\";\nimport Invite from \"scenes/Invite\";\nimport { Action } from \"components/Actions\";\nimport Button from \"components/Button\";\nimport Flex from \"components/Flex\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport InputSearch from \"components/InputSearch\";\nimport Modal from \"components/Modal\";\nimport Scene from \"components/Scene\";\nimport PeopleTable from \"./components/PeopleTable\";\nimport UserStatusFilter from \"./components/UserStatusFilter\";\nimport useBoolean from \"hooks/useBoolean\";\nimport useCurrentTeam from \"hooks/useCurrentTeam\";\nimport useQuery from \"hooks/useQuery\";\nimport useStores from \"hooks/useStores\";\n\nfunction People(props) {\n  const topRef = React.useRef();\n  const location = useLocation();\n  const history = useHistory();\n  const [\n    inviteModalOpen,\n    handleInviteModalOpen,\n    handleInviteModalClose,\n  ] = useBoolean();\n  const team = useCurrentTeam();\n  const { users, policies } = useStores();\n  const { t } = useTranslation();\n  const params = useQuery();\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [data, setData] = React.useState([]);\n  const [totalPages, setTotalPages] = React.useState(0);\n  const [userIds, setUserIds] = React.useState([]);\n  const can = policies.abilities(team.id);\n  const query = params.get(\"query\") || \"\";\n  const filter = params.get(\"filter\") || \"\";\n  const sort = params.get(\"sort\") || \"name\";\n  const direction = (params.get(\"direction\") || \"asc\").toUpperCase();\n  const page = parseInt(params.get(\"page\") || 0, 10);\n  const limit = 25;\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n\n      try {\n        const response = await users.fetchPage({\n          offset: page * limit,\n          limit,\n          sort,\n          direction,\n          query,\n          filter,\n        });\n\n        setTotalPages(Math.ceil(response[PAGINATION_SYMBOL].total / limit));\n        setUserIds(response.map((u) => u.id));\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [query, sort, filter, page, direction, users]);\n\n  React.useEffect(() => {\n    let filtered = users.orderedData;\n    if (!filter) {\n      filtered = users.active.filter((u) => userIds.includes(u.id));\n    } else if (filter === \"all\") {\n      filtered = users.orderedData.filter((u) => userIds.includes(u.id));\n    } else if (filter === \"admins\") {\n      filtered = users.admins.filter((u) => userIds.includes(u.id));\n    } else if (filter === \"suspended\") {\n      filtered = users.suspended.filter((u) => userIds.includes(u.id));\n    } else if (filter === \"invited\") {\n      filtered = users.invited.filter((u) => userIds.includes(u.id));\n    } else if (filter === \"viewers\") {\n      filtered = users.viewers.filter((u) => userIds.includes(u.id));\n    }\n\n    // sort the resulting data by the original order from the server\n    setData(sortBy(filtered, (item) => userIds.indexOf(item.id)));\n  }, [\n    filter,\n    users.active,\n    users.admins,\n    users.orderedData,\n    users.suspended,\n    users.invited,\n    users.viewers,\n    userIds,\n  ]);\n\n  const handleFilter = React.useCallback(\n    (filter) => {\n      if (filter) {\n        params.set(\"filter\", filter);\n        params.delete(\"page\");\n      } else {\n        params.delete(\"filter\");\n      }\n      history.replace({\n        pathname: location.pathname,\n        search: params.toString(),\n      });\n    },\n    [params, history, location.pathname]\n  );\n\n  const handleSearch = React.useCallback(\n    (event) => {\n      const { value } = event.target;\n      if (value) {\n        params.set(\"query\", event.target.value);\n        params.delete(\"page\");\n      } else {\n        params.delete(\"query\");\n      }\n      history.replace({\n        pathname: location.pathname,\n        search: params.toString(),\n      });\n    },\n    [params, history, location.pathname]\n  );\n\n  const handleChangeSort = React.useCallback(\n    (sort, direction) => {\n      if (sort) {\n        params.set(\"sort\", sort);\n      } else {\n        params.delete(\"sort\");\n      }\n      if (direction === \"DESC\") {\n        params.set(\"direction\", direction.toLowerCase());\n      } else {\n        params.delete(\"direction\");\n      }\n      history.replace({\n        pathname: location.pathname,\n        search: params.toString(),\n      });\n    },\n    [params, history, location.pathname]\n  );\n\n  const handleChangePage = React.useCallback(\n    (page) => {\n      if (page) {\n        params.set(\"page\", page.toString());\n      } else {\n        params.delete(\"page\");\n      }\n      history.replace({\n        pathname: location.pathname,\n        search: params.toString(),\n      });\n\n      if (topRef.current) {\n        scrollIntoView(topRef.current, {\n          scrollMode: \"if-needed\",\n          behavior: \"instant\",\n          block: \"start\",\n        });\n      }\n    },\n    [params, history, location.pathname]\n  );\n\n  return (\n    <Scene\n      title={t(\"Members\")}\n      icon={<UserIcon color=\"currentColor\" />}\n      actions={\n        <>\n          {can.inviteUser && (\n            <Action>\n              <Button\n                type=\"button\"\n                data-on=\"click\"\n                data-event-category=\"invite\"\n                data-event-action=\"peoplePage\"\n                onClick={handleInviteModalOpen}\n                icon={<PlusIcon />}\n              >\n                {t(\"Invite people\")}…\n              </Button>\n            </Action>\n          )}\n        </>\n      }\n    >\n      <Heading>{t(\"Members\")}</Heading>\n      <HelpText>\n        <Trans>\n          Everyone that has signed into Outline appears here. It’s possible that\n          there are other users who have access through {team.signinMethods} but\n          haven’t signed in yet.\n        </Trans>\n      </HelpText>\n      <Flex gap={8}>\n        <InputSearch\n          short\n          value={query}\n          placeholder={`${t(\"Filter\")}…`}\n          onChange={handleSearch}\n        />\n        <UserStatusFilter activeKey={filter} onSelect={handleFilter} />\n      </Flex>\n      <PeopleTable\n        topRef={topRef}\n        data={data}\n        canManage={can.manage}\n        isLoading={isLoading}\n        onChangeSort={handleChangeSort}\n        onChangePage={handleChangePage}\n        page={page}\n        totalPages={totalPages}\n      />\n      {can.inviteUser && (\n        <Modal\n          title={t(\"Invite people\")}\n          onRequestClose={handleInviteModalClose}\n          isOpen={inviteModalOpen}\n        >\n          <Invite onSubmit={handleInviteModalClose} />\n        </Modal>\n      )}\n    </Scene>\n  );\n}\n\nexport default observer(People);\n","// @flow\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport Button from \"components/Button\";\nimport Flex from \"components/Flex\";\nimport HelpText from \"components/HelpText\";\nimport Modal from \"components/Modal\";\nimport useStores from \"hooks/useStores\";\nimport useToasts from \"hooks/useToasts\";\n\ntype Props = {|\n  onRequestClose: () => void,\n|};\n\nfunction UserDelete({ onRequestClose }: Props) {\n  const [isDeleting, setIsDeleting] = React.useState();\n  const { auth } = useStores();\n  const { showToast } = useToasts();\n  const { t } = useTranslation();\n\n  const handleSubmit = React.useCallback(\n    async (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      setIsDeleting(true);\n\n      try {\n        await auth.deleteUser();\n        auth.logout();\n      } catch (error) {\n        showToast(error.message, { type: \"error\" });\n      } finally {\n        setIsDeleting(false);\n      }\n    },\n    [auth, showToast]\n  );\n\n  return (\n    <Modal isOpen title={t(\"Delete Account\")} onRequestClose={onRequestClose}>\n      <Flex column>\n        <form onSubmit={handleSubmit}>\n          <HelpText>\n            <Trans>\n              Are you sure? Deleting your account will destroy identifying data\n              associated with your user and cannot be undone. You will be\n              immediately logged out of Outline and all your API tokens will be\n              revoked.\n            </Trans>\n          </HelpText>\n          <HelpText>\n            <Trans\n              defaults=\"<em>Note:</em> Signing back in will cause a new account to be automatically reprovisioned.\"\n              components={{ em: <strong /> }}\n            />\n          </HelpText>\n          <Button type=\"submit\" danger>\n            {isDeleting ? `${t(\"Deleting\")}…` : t(\"Delete My Account\")}\n          </Button>\n        </form>\n      </Flex>\n    </Modal>\n  );\n}\n\nexport default observer(UserDelete);\n","// @flow\nimport { observable } from \"mobx\";\nimport { observer, inject } from \"mobx-react\";\nimport { ProfileIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { Trans, withTranslation, type TFunction } from \"react-i18next\";\nimport styled from \"styled-components\";\nimport { languageOptions } from \"shared/i18n\";\nimport AuthStore from \"stores/AuthStore\";\nimport ToastsStore from \"stores/ToastsStore\";\nimport UserDelete from \"scenes/UserDelete\";\nimport Button from \"components/Button\";\nimport Flex from \"components/Flex\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport Input, { LabelText } from \"components/Input\";\nimport InputSelect from \"components/InputSelect\";\nimport Scene from \"components/Scene\";\nimport ImageUpload from \"./components/ImageUpload\";\n\ntype Props = {\n  auth: AuthStore,\n  toasts: ToastsStore,\n  t: TFunction,\n};\n\n@observer\nclass Profile extends React.Component<Props> {\n  timeout: TimeoutID;\n  form: ?HTMLFormElement;\n\n  @observable name: string;\n  @observable avatarUrl: ?string;\n  @observable showDeleteModal: boolean = false;\n  @observable language: string;\n\n  componentDidMount() {\n    if (this.props.auth.user) {\n      this.name = this.props.auth.user.name;\n      this.language = this.props.auth.user.language;\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  handleSubmit = async (ev: SyntheticEvent<>) => {\n    const { t } = this.props;\n    ev.preventDefault();\n\n    await this.props.auth.updateUser({\n      name: this.name,\n      avatarUrl: this.avatarUrl,\n      language: this.language,\n    });\n\n    this.props.toasts.showToast(t(\"Profile saved\"), { type: \"success\" });\n  };\n\n  handleNameChange = (ev: SyntheticInputEvent<*>) => {\n    this.name = ev.target.value;\n  };\n\n  handleAvatarUpload = async (avatarUrl: string) => {\n    const { t } = this.props;\n    this.avatarUrl = avatarUrl;\n\n    await this.props.auth.updateUser({\n      avatarUrl: this.avatarUrl,\n    });\n    this.props.toasts.showToast(t(\"Profile picture updated\"), {\n      type: \"success\",\n    });\n  };\n\n  handleAvatarError = (error: ?string) => {\n    const { t } = this.props;\n    this.props.toasts.showToast(\n      error || t(\"Unable to upload new profile picture\"),\n      { type: \"error\" }\n    );\n  };\n\n  handleLanguageChange = (ev: SyntheticInputEvent<*>) => {\n    this.language = ev.target.value;\n  };\n\n  toggleDeleteAccount = () => {\n    this.showDeleteModal = !this.showDeleteModal;\n  };\n\n  get isValid() {\n    return this.form && this.form.checkValidity();\n  }\n\n  render() {\n    const { t } = this.props;\n    const { user, isSaving } = this.props.auth;\n    if (!user) return null;\n    const avatarUrl = this.avatarUrl || user.avatarUrl;\n\n    return (\n      <Scene title={t(\"Profile\")} icon={<ProfileIcon color=\"currentColor\" />}>\n        <Heading>{t(\"Profile\")}</Heading>\n        <ProfilePicture column>\n          <LabelText>{t(\"Photo\")}</LabelText>\n          <AvatarContainer>\n            <ImageUpload\n              onSuccess={this.handleAvatarUpload}\n              onError={this.handleAvatarError}\n            >\n              <Avatar src={avatarUrl} />\n              <Flex auto align=\"center\" justify=\"center\">\n                {t(\"Upload\")}\n              </Flex>\n            </ImageUpload>\n          </AvatarContainer>\n        </ProfilePicture>\n        <form onSubmit={this.handleSubmit} ref={(ref) => (this.form = ref)}>\n          <Input\n            label={t(\"Full name\")}\n            autoComplete=\"name\"\n            value={this.name}\n            onChange={this.handleNameChange}\n            required\n            short\n          />\n          <br />\n          <InputSelect\n            label={t(\"Language\")}\n            options={languageOptions}\n            value={this.language}\n            onChange={this.handleLanguageChange}\n            short\n          />\n          <HelpText small>\n            <Trans>\n              Please note that translations are currently in early access.\n              <br />\n              Community contributions are accepted though our{\" \"}\n              <a\n                href=\"https://translate.getoutline.com\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                translation portal\n              </a>\n            </Trans>\n            .\n          </HelpText>\n          <Button type=\"submit\" disabled={isSaving || !this.isValid}>\n            {isSaving ? `${t(\"Saving\")}…` : t(\"Save\")}\n          </Button>\n        </form>\n\n        <DangerZone>\n          <h2>{t(\"Delete Account\")}</h2>\n          <HelpText small>\n            <Trans>\n              You may delete your account at any time, note that this is\n              unrecoverable\n            </Trans>\n          </HelpText>\n          <Button onClick={this.toggleDeleteAccount} neutral>\n            {t(\"Delete account\")}…\n          </Button>\n        </DangerZone>\n        {this.showDeleteModal && (\n          <UserDelete onRequestClose={this.toggleDeleteAccount} />\n        )}\n      </Scene>\n    );\n  }\n}\n\nconst DangerZone = styled.div`\n  margin-top: 60px;\n`;\n\nconst ProfilePicture = styled(Flex)`\n  margin-bottom: 24px;\n`;\n\nconst avatarStyles = `\n  width: 80px;\n  height: 80px;\n  border-radius: 8px;\n`;\n\nconst AvatarContainer = styled(Flex)`\n  ${avatarStyles};\n  position: relative;\n\n  div div {\n    ${avatarStyles};\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    opacity: 0;\n    cursor: pointer;\n    transition: all 250ms;\n  }\n\n  &:hover div {\n    opacity: 1;\n    background: rgba(0, 0, 0, 0.75);\n    color: ${(props) => props.theme.white};\n  }\n`;\n\nconst Avatar = styled.img`\n  ${avatarStyles};\n`;\n\nexport default withTranslation()<Profile>(inject(\"auth\", \"toasts\")(Profile));\n","// @flow\nimport { debounce } from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport { PadlockIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport Checkbox from \"components/Checkbox\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport Scene from \"components/Scene\";\nimport useCurrentTeam from \"hooks/useCurrentTeam\";\nimport useStores from \"hooks/useStores\";\nimport useToasts from \"hooks/useToasts\";\n\nfunction Security() {\n  const { auth } = useStores();\n  const team = useCurrentTeam();\n  const { t } = useTranslation();\n  const { showToast } = useToasts();\n  const [data, setData] = useState({\n    sharing: team.sharing,\n    documentEmbeds: team.documentEmbeds,\n    guestSignin: team.guestSignin,\n  });\n\n  const showSuccessMessage = React.useCallback(\n    debounce(() => {\n      showToast(t(\"Settings saved\"), { type: \"success\" });\n    }, 250),\n    [t, showToast]\n  );\n\n  const handleChange = React.useCallback(\n    async (ev: SyntheticInputEvent<*>) => {\n      const newData = { ...data, [ev.target.name]: ev.target.checked };\n      setData(newData);\n\n      await auth.updateTeam(newData);\n\n      showSuccessMessage();\n    },\n    [auth, data, showSuccessMessage]\n  );\n\n  return (\n    <Scene title={t(\"Security\")} icon={<PadlockIcon color=\"currentColor\" />}>\n      <Heading>\n        <Trans>Security</Trans>\n      </Heading>\n      <HelpText>\n        <Trans>\n          Settings that impact the access, security, and content of your\n          knowledge base.\n        </Trans>\n      </HelpText>\n\n      <Checkbox\n        label={t(\"Allow email authentication\")}\n        name=\"guestSignin\"\n        checked={data.guestSignin}\n        onChange={handleChange}\n        note={t(\"When enabled, users can sign-in using their email address\")}\n      />\n      <Checkbox\n        label={t(\"Public document sharing\")}\n        name=\"sharing\"\n        checked={data.sharing}\n        onChange={handleChange}\n        note={t(\n          \"When enabled, documents can be shared publicly on the internet by any team member\"\n        )}\n      />\n      <Checkbox\n        label={t(\"Rich service embeds\")}\n        name=\"documentEmbeds\"\n        checked={data.documentEmbeds}\n        onChange={handleChange}\n        note={t(\n          \"Links to supported services are shown as rich embeds within your documents\"\n        )}\n      />\n    </Scene>\n  );\n}\n\nexport default observer(Security);\n","// @flow\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMenuState } from \"reakit/Menu\";\nimport Share from \"models/Share\";\nimport ContextMenu from \"components/ContextMenu\";\nimport MenuItem from \"components/ContextMenu/MenuItem\";\nimport OverflowMenuButton from \"components/ContextMenu/OverflowMenuButton\";\nimport CopyToClipboard from \"components/CopyToClipboard\";\nimport useStores from \"hooks/useStores\";\nimport useToasts from \"hooks/useToasts\";\n\ntype Props = {\n  share: Share,\n};\n\nfunction ShareMenu({ share }: Props) {\n  const menu = useMenuState({ modal: true });\n  const { shares, policies } = useStores();\n  const { showToast } = useToasts();\n  const { t } = useTranslation();\n  const history = useHistory();\n  const can = policies.abilities(share.id);\n\n  const handleGoToDocument = React.useCallback(\n    (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n      history.push(share.documentUrl);\n    },\n    [history, share]\n  );\n\n  const handleRevoke = React.useCallback(\n    async (ev: SyntheticEvent<>) => {\n      ev.preventDefault();\n\n      try {\n        await shares.revoke(share);\n        showToast(t(\"Share link revoked\"), { type: \"info\" });\n      } catch (err) {\n        showToast(err.message, { type: \"error\" });\n      }\n    },\n    [t, shares, share, showToast]\n  );\n\n  const handleCopy = React.useCallback(() => {\n    showToast(t(\"Share link copied\"), { type: \"info\" });\n  }, [t, showToast]);\n\n  return (\n    <>\n      <OverflowMenuButton aria-label={t(\"Show menu\")} {...menu} />\n      <ContextMenu {...menu} aria-label={t(\"Share options\")}>\n        <CopyToClipboard text={share.url} onCopy={handleCopy}>\n          <MenuItem {...menu}>{t(\"Copy link\")}</MenuItem>\n        </CopyToClipboard>\n        <MenuItem {...menu} onClick={handleGoToDocument}>\n          {t(\"Go to document\")}\n        </MenuItem>\n        {can.revoke && (\n          <>\n            <hr />\n            <MenuItem {...menu} onClick={handleRevoke}>\n              {t(\"Revoke link\")}\n            </MenuItem>\n          </>\n        )}\n      </ContextMenu>\n    </>\n  );\n}\n\nexport default observer(ShareMenu);\n","// @flow\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Share from \"models/Share\";\nimport ListItem from \"components/List/Item\";\nimport Time from \"components/Time\";\nimport ShareMenu from \"menus/ShareMenu\";\n\ntype Props = {|\n  share: Share,\n|};\n\nconst ShareListItem = ({ share }: Props) => {\n  const { t } = useTranslation();\n  const { lastAccessedAt } = share;\n\n  return (\n    <ListItem\n      title={share.documentTitle}\n      subtitle={\n        <>\n          {t(\"Shared\")} <Time dateTime={share.createdAt} addSuffix />{\" \"}\n          {t(\"by {{ name }}\", { name: share.createdBy.name })}{\" \"}\n          {lastAccessedAt && (\n            <>\n              {\" \"}\n              &middot; {t(\"Last accessed\")}{\" \"}\n              <Time dateTime={lastAccessedAt} addSuffix />\n            </>\n          )}\n        </>\n      }\n      actions={<ShareMenu share={share} />}\n    />\n  );\n};\n\nexport default ShareListItem;\n","// @flow\nimport { observer } from \"mobx-react\";\nimport { LinkIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport Empty from \"components/Empty\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport PaginatedList from \"components/PaginatedList\";\nimport Scene from \"components/Scene\";\nimport Subheading from \"components/Subheading\";\nimport ShareListItem from \"./components/ShareListItem\";\nimport useCurrentTeam from \"hooks/useCurrentTeam\";\nimport useStores from \"hooks/useStores\";\n\nfunction Shares() {\n  const team = useCurrentTeam();\n  const { t } = useTranslation();\n  const { shares, auth, policies } = useStores();\n  const canShareDocuments = auth.team && auth.team.sharing;\n  const can = policies.abilities(team.id);\n\n  return (\n    <Scene title={t(\"Share Links\")} icon={<LinkIcon color=\"currentColor\" />}>\n      <Heading>{t(\"Share Links\")}</Heading>\n      <HelpText>\n        <Trans>\n          Documents that have been shared are listed below. Anyone that has the\n          public link can access a read-only version of the document until the\n          link has been revoked.\n        </Trans>\n      </HelpText>\n      {can.manage && (\n        <HelpText>\n          {!canShareDocuments && (\n            <strong>{t(\"Sharing is currently disabled.\")}</strong>\n          )}{\" \"}\n          <Trans\n            defaults=\"You can globally enable and disable public document sharing in the <em>security settings</em>.\"\n            components={{ em: <Link to=\"/settings/security\" /> }}\n          />\n        </HelpText>\n      )}\n      <Subheading>{t(\"Shared documents\")}</Subheading>\n      <PaginatedList\n        items={shares.published}\n        empty={<Empty>{t(\"No share links, yet.\")}</Empty>}\n        fetch={shares.fetchPage}\n        renderItem={(item) => <ShareListItem key={item.id} share={item} />}\n      />\n    </Scene>\n  );\n}\n\nexport default observer(Shares);\n","// @flow\nimport List from \"./List\";\nexport default List;\n","// @flow\nimport styled from \"styled-components\";\n\nconst List = styled.ol`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport default List;\n","// @flow\nimport * as React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { slackAuth } from \"shared/utils/routeHelpers\";\nimport Button from \"components/Button\";\nimport SlackIcon from \"components/SlackIcon\";\nimport env from \"env\";\n\ntype Props = {|\n  scopes?: string[],\n  redirectUri: string,\n  state?: string,\n  label?: string,\n|};\n\nfunction SlackButton({ state = \"\", scopes, redirectUri, label }: Props) {\n  const { t } = useTranslation();\n  const handleClick = () =>\n    (window.location.href = slackAuth(\n      state,\n      scopes,\n      env.SLACK_KEY,\n      redirectUri\n    ));\n\n  return (\n    <Button\n      onClick={handleClick}\n      icon={<SlackIcon fill=\"currentColor\" />}\n      neutral\n    >\n      {label || t(\"Add to Slack\")}\n    </Button>\n  );\n}\n\nexport default SlackButton;\n","// @flow\nimport { find } from \"lodash\";\nimport { observer } from \"mobx-react\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport styled from \"styled-components\";\n\nimport Button from \"components/Button\";\nimport CollectionIcon from \"components/CollectionIcon\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport List from \"components/List\";\nimport ListItem from \"components/List/Item\";\nimport Notice from \"components/Notice\";\nimport Scene from \"components/Scene\";\nimport SlackIcon from \"components/SlackIcon\";\nimport SlackButton from \"./components/SlackButton\";\nimport env from \"env\";\nimport useCurrentTeam from \"hooks/useCurrentTeam\";\nimport useQuery from \"hooks/useQuery\";\nimport useStores from \"hooks/useStores\";\n\nfunction Slack() {\n  const team = useCurrentTeam();\n  const { collections, integrations } = useStores();\n  const { t } = useTranslation();\n  const query = useQuery();\n  const error = query.get(\"error\");\n\n  React.useEffect(() => {\n    collections.fetchPage({ limit: 100 });\n    integrations.fetchPage({ limit: 100 });\n  }, [collections, integrations]);\n\n  const commandIntegration = find(integrations.slackIntegrations, {\n    type: \"command\",\n  });\n\n  return (\n    <Scene title=\"Slack\" icon={<SlackIcon color=\"currentColor\" />}>\n      <Heading>Slack</Heading>\n      {error === \"access_denied\" && (\n        <Notice>\n          <Trans>\n            Whoops, you need to accept the permissions in Slack to connect\n            Outline to your team. Try again?\n          </Trans>\n        </Notice>\n      )}\n      {error === \"unauthenticated\" && (\n        <Notice>\n          <Trans>\n            Something went wrong while authenticating your request. Please try\n            logging in again?\n          </Trans>\n        </Notice>\n      )}\n      <HelpText>\n        <Trans\n          defaults=\"Get rich previews of Outline links shared in Slack and use the <em>{{ command }}</em> slash command to search for documents without leaving your chat.\"\n          values={{ command: \"/outline\" }}\n          components={{ em: <Code /> }}\n        />\n      </HelpText>\n      <p>\n        {commandIntegration ? (\n          <Button onClick={commandIntegration.delete}>{t(\"Disconnect\")}</Button>\n        ) : (\n          <SlackButton\n            scopes={[\"commands\", \"links:read\", \"links:write\"]}\n            redirectUri={`${env.URL}/auth/slack.commands`}\n            state={team.id}\n          />\n        )}\n      </p>\n      <p>&nbsp;</p>\n\n      <h2>{t(\"Collections\")}</h2>\n      <HelpText>\n        <Trans>\n          Connect Outline collections to Slack channels and messages will be\n          automatically posted to Slack when documents are published or updated.\n        </Trans>\n      </HelpText>\n\n      <List>\n        {collections.orderedData.map((collection) => {\n          const integration = find(integrations.slackIntegrations, {\n            collectionId: collection.id,\n          });\n\n          if (integration) {\n            return (\n              <ListItem\n                key={integration.id}\n                title={collection.name}\n                image={<CollectionIcon collection={collection} />}\n                subtitle={\n                  <Trans\n                    defaults={`Connected to the <em>{{ channelName }}</em> channel`}\n                    values={{ channelName: integration.settings.channel }}\n                    components={{ em: <strong /> }}\n                  />\n                }\n                actions={\n                  <Button onClick={integration.delete}>\n                    {t(\"Disconnect\")}\n                  </Button>\n                }\n              />\n            );\n          }\n\n          return (\n            <ListItem\n              key={collection.id}\n              title={collection.name}\n              image={<CollectionIcon collection={collection} />}\n              actions={\n                <SlackButton\n                  scopes={[\"incoming-webhook\"]}\n                  redirectUri={`${env.URL}/auth/slack.post`}\n                  state={collection.id}\n                  label={t(\"Connect\")}\n                />\n              }\n            />\n          );\n        })}\n      </List>\n    </Scene>\n  );\n}\n\nconst Code = styled.code`\n  padding: 4px 6px;\n  margin: 0 2px;\n  background: ${(props) => props.theme.codeBackground};\n  border-radius: 4px;\n`;\n\nexport default observer(Slack);\n","// @flow\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport Button from \"components/Button\";\nimport Flex from \"components/Flex\";\nimport HelpText from \"components/HelpText\";\nimport Input from \"components/Input\";\nimport useStores from \"hooks/useStores\";\nimport useToasts from \"hooks/useToasts\";\n\ntype Props = {|\n  onSubmit: () => void,\n|};\n\nfunction APITokenNew({ onSubmit }: Props) {\n  const [name, setName] = React.useState(\"\");\n  const [isSaving, setIsSaving] = React.useState(false);\n  const { apiKeys } = useStores();\n  const { showToast } = useToasts();\n  const { t } = useTranslation();\n\n  const handleSubmit = React.useCallback(async () => {\n    setIsSaving(true);\n\n    try {\n      await apiKeys.create({ name });\n      showToast(t(\"API token created\", { type: \"success\" }));\n      onSubmit();\n    } catch (err) {\n      showToast(err.message, { type: \"error\" });\n    } finally {\n      setIsSaving(false);\n    }\n  }, [t, showToast, name, onSubmit, apiKeys]);\n\n  const handleNameChange = React.useCallback((event) => {\n    setName(event.target.value);\n  }, []);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <HelpText>\n        <Trans>\n          Name your token something that will help you to remember it's use in\n          the future, for example \"local development\", \"production\", or\n          \"continuous integration\".\n        </Trans>\n      </HelpText>\n      <Flex>\n        <Input\n          type=\"text\"\n          label=\"Name\"\n          onChange={handleNameChange}\n          value={name}\n          required\n          autoFocus\n          flex\n        />\n      </Flex>\n      <Button type=\"submit\" disabled={isSaving || !name}>\n        {isSaving ? \"Creating…\" : \"Create\"}\n      </Button>\n    </form>\n  );\n}\n\nexport default APITokenNew;\n","// @flow\nimport * as React from \"react\";\nimport ApiKey from \"models/ApiKey\";\nimport Button from \"components/Button\";\nimport ListItem from \"components/List/Item\";\n\ntype Props = {|\n  token: ApiKey,\n  onDelete: (tokenId: string) => Promise<void>,\n|};\n\nconst TokenListItem = ({ token, onDelete }: Props) => {\n  return (\n    <ListItem\n      key={token.id}\n      title={\n        <>\n          {token.name} – <code>{token.secret}</code>\n        </>\n      }\n      actions={\n        <Button onClick={() => onDelete(token.id)} neutral>\n          Revoke\n        </Button>\n      }\n    />\n  );\n};\n\nexport default TokenListItem;\n","// @flow\nimport { observer } from \"mobx-react\";\nimport { CodeIcon } from \"outline-icons\";\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport APITokenNew from \"scenes/APITokenNew\";\nimport { Action } from \"components/Actions\";\nimport Button from \"components/Button\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport Modal from \"components/Modal\";\nimport PaginatedList from \"components/PaginatedList\";\nimport Scene from \"components/Scene\";\nimport Subheading from \"components/Subheading\";\nimport TokenListItem from \"./components/TokenListItem\";\nimport useBoolean from \"hooks/useBoolean\";\nimport useCurrentTeam from \"hooks/useCurrentTeam\";\nimport useStores from \"hooks/useStores\";\n\nfunction Tokens() {\n  const team = useCurrentTeam();\n  const { t } = useTranslation();\n  const { apiKeys, policies } = useStores();\n  const [newModalOpen, handleNewModalOpen, handleNewModalClose] = useBoolean();\n  const can = policies.abilities(team.id);\n\n  return (\n    <Scene\n      title={t(\"API Tokens\")}\n      icon={<CodeIcon color=\"currentColor\" />}\n      actions={\n        <>\n          {can.createApiKey && (\n            <Action>\n              <Button\n                type=\"submit\"\n                value={`${t(\"New token\")}…`}\n                onClick={handleNewModalOpen}\n              />\n            </Action>\n          )}\n        </>\n      }\n    >\n      <Heading>{t(\"API Tokens\")}</Heading>\n      <HelpText>\n        <Trans\n          defaults=\"You can create an unlimited amount of personal tokens to authenticate\n          with the API. Tokens have the same permissions as your user account.\n          For more details see the <em>developer documentation</em>.\"\n          components={{\n            em: (\n              <a href=\"https://www.getoutline.com/developers\" target=\"_blank\" />\n            ),\n          }}\n        />\n      </HelpText>\n\n      <PaginatedList\n        fetch={apiKeys.fetchPage}\n        items={apiKeys.orderedData}\n        heading={<Subheading sticky>{t(\"Tokens\")}</Subheading>}\n        renderItem={(token) => (\n          <TokenListItem key={token.id} token={token} onDelete={token.delete} />\n        )}\n      />\n\n      <Modal\n        title={t(\"Create a token\")}\n        onRequestClose={handleNewModalClose}\n        isOpen={newModalOpen}\n      >\n        <APITokenNew onSubmit={handleNewModalClose} />\n      </Modal>\n    </Scene>\n  );\n}\n\nexport default observer(Tokens);\n","// @flow\nimport * as React from \"react\";\nimport { useTranslation, Trans } from \"react-i18next\";\nimport Button from \"components/Button\";\nimport Heading from \"components/Heading\";\nimport HelpText from \"components/HelpText\";\nimport Scene from \"components/Scene\";\nimport ZapierIcon from \"components/ZapierIcon\";\n\nfunction Zapier() {\n  const { t } = useTranslation();\n  return (\n    <Scene title={t(\"Zapier\")} icon={<ZapierIcon color=\"currentColor\" />}>\n      <Heading>{t(\"Zapier\")}</Heading>\n      <HelpText>\n        <Trans>\n          Zapier is a platform that allows Outline to easily integrate with\n          thousands of other business tools. Head over to Zapier to setup a\n          \"Zap\" and start programmatically interacting with Outline.'\n        </Trans>\n      </HelpText>\n      <p>\n        <Button\n          onClick={() =>\n            (window.location.href = \"https://zapier.com/apps/outline\")\n          }\n        >\n          {t(\"Open Zapier\")} →\n        </Button>\n      </p>\n    </Scene>\n  );\n}\n\nexport default Zapier;\n","// @flow\nimport * as React from \"react\";\nimport { Switch, Redirect } from \"react-router-dom\";\nimport Details from \"scenes/Settings/Details\";\nimport Groups from \"scenes/Settings/Groups\";\nimport ImportExport from \"scenes/Settings/ImportExport\";\nimport Notifications from \"scenes/Settings/Notifications\";\nimport People from \"scenes/Settings/People\";\nimport Profile from \"scenes/Settings/Profile\";\nimport Security from \"scenes/Settings/Security\";\nimport Shares from \"scenes/Settings/Shares\";\nimport Slack from \"scenes/Settings/Slack\";\nimport Tokens from \"scenes/Settings/Tokens\";\nimport Zapier from \"scenes/Settings/Zapier\";\nimport Route from \"components/ProfiledRoute\";\n\nexport default function SettingsRoutes() {\n  return (\n    <Switch>\n      <Route exact path=\"/settings\" component={Profile} />\n      <Route exact path=\"/settings/details\" component={Details} />\n      <Route exact path=\"/settings/security\" component={Security} />\n      <Route exact path=\"/settings/members\" component={People} />\n      <Route exact path=\"/settings/groups\" component={Groups} />\n      <Route exact path=\"/settings/shares\" component={Shares} />\n      <Route exact path=\"/settings/tokens\" component={Tokens} />\n      <Route exact path=\"/settings/notifications\" component={Notifications} />\n      <Route exact path=\"/settings/integrations/slack\" component={Slack} />\n      <Route exact path=\"/settings/integrations/zapier\" component={Zapier} />\n      <Route exact path=\"/settings/import-export\" component={ImportExport} />\n      <Redirect from=\"/settings/people\" to=\"/settings/members\" />\n    </Switch>\n  );\n}\n","// @flow\nimport Compressor from \"compressorjs\";\n\ntype Options = { maxWidth?: number, maxHeight?: number };\n\nexport const compressImage = async (\n  file: File | Blob,\n  options?: Options\n): Promise<Blob> => {\n  return new Promise((resolve, reject) => {\n    new Compressor(file, {\n      ...options,\n      success: resolve,\n      error: reject,\n    });\n  });\n};\n","// @flow\nimport { useLocation } from \"react-router-dom\";\n\nexport default function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","// @flow\nimport { observable } from \"mobx\";\nimport { observer, inject } from \"mobx-react\";\nimport * as React from \"react\";\nimport AvatarEditor from \"react-avatar-editor\";\nimport Dropzone from \"react-dropzone\";\nimport styled from \"styled-components\";\nimport UiStore from \"stores/UiStore\";\nimport Button from \"components/Button\";\nimport Flex from \"components/Flex\";\nimport LoadingIndicator from \"components/LoadingIndicator\";\nimport Modal from \"components/Modal\";\nimport { compressImage } from \"utils/compressImage\";\nimport { uploadFile, dataUrlToBlob } from \"utils/uploadFile\";\n\nconst EMPTY_OBJECT = {};\n\ntype Props = {\n  children?: React.Node,\n  onSuccess: (string) => void | Promise<void>,\n  onError: (string) => void,\n  submitText: string,\n  borderRadius: number,\n  ui: UiStore,\n};\n\n@observer\nclass ImageUpload extends React.Component<Props> {\n  @observable isUploading: boolean = false;\n  @observable isCropping: boolean = false;\n  @observable zoom: number = 1;\n  @observable file: File;\n  avatarEditorRef: AvatarEditor;\n\n  static defaultProps = {\n    submitText: \"Crop Picture\",\n    borderRadius: 150,\n  };\n\n  onDropAccepted = async (files: File[]) => {\n    this.isCropping = true;\n    this.file = files[0];\n  };\n\n  handleCrop = () => {\n    this.isUploading = true;\n\n    // allow the UI to update before converting the canvas to a Blob\n    // for large images this can cause the page rendering to hang.\n    setImmediate(this.uploadImage);\n  };\n\n  uploadImage = async () => {\n    const canvas = this.avatarEditorRef.getImage();\n    const imageBlob = dataUrlToBlob(canvas.toDataURL());\n    try {\n      const compressed = await compressImage(imageBlob, {\n        maxHeight: 512,\n        maxWidth: 512,\n      });\n      const attachment = await uploadFile(compressed, {\n        name: this.file.name,\n        public: true,\n      });\n      this.props.onSuccess(attachment.url);\n    } catch (err) {\n      this.props.onError(err.message);\n    } finally {\n      this.isUploading = false;\n      this.isCropping = false;\n    }\n  };\n\n  handleClose = () => {\n    this.isUploading = false;\n    this.isCropping = false;\n  };\n\n  handleZoom = (event: SyntheticDragEvent<*>) => {\n    let target = event.target;\n    if (target instanceof HTMLInputElement) {\n      this.zoom = parseFloat(target.value);\n    }\n  };\n\n  renderCropping() {\n    const { ui, submitText } = this.props;\n\n    return (\n      <Modal isOpen onRequestClose={this.handleClose} title=\"\">\n        <Flex auto column align=\"center\" justify=\"center\">\n          {this.isUploading && <LoadingIndicator />}\n          <AvatarEditorContainer>\n            <AvatarEditor\n              ref={(ref) => (this.avatarEditorRef = ref)}\n              image={this.file}\n              width={250}\n              height={250}\n              border={25}\n              borderRadius={this.props.borderRadius}\n              color={\n                ui.theme === \"light\" ? [255, 255, 255, 0.6] : [0, 0, 0, 0.6]\n              } // RGBA\n              scale={this.zoom}\n              rotate={0}\n            />\n          </AvatarEditorContainer>\n          <RangeInput\n            type=\"range\"\n            min=\"0.1\"\n            max=\"2\"\n            step=\"0.01\"\n            defaultValue=\"1\"\n            onChange={this.handleZoom}\n          />\n          <CropButton onClick={this.handleCrop} disabled={this.isUploading}>\n            {this.isUploading ? \"Uploading…\" : submitText}\n          </CropButton>\n        </Flex>\n      </Modal>\n    );\n  }\n\n  render() {\n    if (this.isCropping) {\n      return this.renderCropping();\n    }\n\n    return (\n      <Dropzone\n        accept=\"image/png, image/jpeg\"\n        onDropAccepted={this.onDropAccepted}\n        style={EMPTY_OBJECT}\n        disablePreview\n      >\n        {({ getRootProps, getInputProps, isDragActive }) => (\n          <div {...getRootProps()} {...{ isDragActive }}>\n            <input {...getInputProps()} />\n            {this.props.children}\n          </div>\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nconst AvatarEditorContainer = styled(Flex)`\n  margin-bottom: 30px;\n`;\n\nconst RangeInput = styled.input`\n  display: block;\n  width: 300px;\n  margin-bottom: 30px;\n  height: 4px;\n  cursor: pointer;\n  color: inherit;\n  border-radius: 99999px;\n  background-color: #dee1e3;\n  appearance: none;\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    background: ${(props) => props.theme.text};\n    cursor: pointer;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst CropButton = styled(Button)`\n  width: 300px;\n`;\n\nexport default inject(\"ui\")(ImageUpload);\n"],"sourceRoot":""}